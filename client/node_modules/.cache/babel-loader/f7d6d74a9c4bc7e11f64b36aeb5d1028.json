{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport './../utils/polyfills';\nimport { deepFlatten, isLegacyFactory, lazy, traverse, values } from './../utils/object';\nimport * as emitter from './../utils/emitter';\nimport { importFactory } from './function/import';\nimport { configFactory } from './function/config';\nimport { factory, isFactory } from '../utils/factory';\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../utils/is';\nimport { initial, last } from '../utils/array';\nimport { warnOnce } from '../utils/log';\nimport { ArgumentsError } from '../error/ArgumentsError';\nimport { DimensionError } from '../error/DimensionError';\nimport { IndexError } from '../error/IndexError';\nimport { DEFAULT_CONFIG } from './config';\n/**\n * Create a mathjs instance from given factory functions and optionally config\n *\n * Usage:\n *\n *     const mathjs1 = create({ createAdd, createMultiply, ...})\n *     const config = { number: 'BigNumber' }\n *     const mathjs2 = create(all, config)\n *\n * @param {Object} [factories] An object with factory functions\n *                             The object can contain nested objects,\n *                             all nested objects will be flattened.\n * @param {Object} [config]    Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\nexport function create(factories, config) {\n  var configInternal = _extends({}, DEFAULT_CONFIG, config); // simple test for ES5 support\n\n\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // create the mathjs instance\n\n\n  var math = emitter.mixin({\n    // only here for backward compatibility for legacy factory functions\n    isNumber: isNumber,\n    isComplex: isComplex,\n    isBigNumber: isBigNumber,\n    isFraction: isFraction,\n    isUnit: isUnit,\n    isString: isString,\n    isArray: isArray,\n    isMatrix: isMatrix,\n    isCollection: isCollection,\n    isDenseMatrix: isDenseMatrix,\n    isSparseMatrix: isSparseMatrix,\n    isRange: isRange,\n    isIndex: isIndex,\n    isBoolean: isBoolean,\n    isResultSet: isResultSet,\n    isHelp: isHelp,\n    isFunction: isFunction,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isAccessorNode: isAccessorNode,\n    isArrayNode: isArrayNode,\n    isAssignmentNode: isAssignmentNode,\n    isBlockNode: isBlockNode,\n    isConditionalNode: isConditionalNode,\n    isConstantNode: isConstantNode,\n    isFunctionAssignmentNode: isFunctionAssignmentNode,\n    isFunctionNode: isFunctionNode,\n    isIndexNode: isIndexNode,\n    isNode: isNode,\n    isObjectNode: isObjectNode,\n    isOperatorNode: isOperatorNode,\n    isParenthesisNode: isParenthesisNode,\n    isRangeNode: isRangeNode,\n    isSymbolNode: isSymbolNode,\n    isChain: isChain\n  }); // load config function and apply provided config\n\n  math.config = configFactory(configInternal, math.emit);\n  math.expression = {\n    transform: {},\n    mathWithTransform: {\n      config: math.config\n    }\n  }; // cached factories and instances used by function load\n\n  var legacyFactories = [];\n  var legacyInstances = [];\n  /**\n   * Load a function or data type from a factory.\n   * If the function or data type already exists, the existing instance is\n   * returned.\n   * @param {Function} factory\n   * @returns {*}\n   */\n\n  function load(factory) {\n    if (isFactory(factory)) {\n      return factory(math);\n    }\n\n    var firstProperty = factory[Object.keys(factory)[0]];\n\n    if (isFactory(firstProperty)) {\n      return firstProperty(math);\n    }\n\n    if (!isLegacyFactory(factory)) {\n      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = legacyFactories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, configInternal, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, configInternal, load, math.typed);\n      } // append to the cache\n\n\n      legacyFactories.push(factory);\n      legacyInstances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = legacyInstances[index];\n    }\n\n    return instance;\n  }\n\n  var importedFactories = {}; // load the import function\n\n  function lazyTyped() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return math.typed.apply(math.typed, args);\n  }\n\n  var internalImport = importFactory(lazyTyped, load, math, importedFactories);\n  math[\"import\"] = internalImport; // listen for changes in config, import all functions again when changed\n  // TODO: move this listener into the import function?\n\n  math.on('config', function () {\n    values(importedFactories).forEach(function (factory) {\n      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {\n        // FIXME: only re-create when the current instance is the same as was initially created\n        // FIXME: delete the functions/constants before importing them again?\n        internalImport(factory, {\n          override: true\n        });\n      }\n    });\n  }); // the create function exposed on the mathjs instance is bound to\n  // the factory functions passed before\n\n  math.create = create.bind(null, factories); // export factory function\n\n  math.factory = factory; // import the factory functions like createAdd as an array instead of object,\n  // else they will get a different naming (`createAdd` instead of `add`).\n\n  math[\"import\"](values(deepFlatten(factories))); // TODO: deprecated since v6.0.0. Clean up some day\n\n  var movedNames = ['type.isNumber', 'type.isComplex', 'type.isBigNumber', 'type.isFraction', 'type.isUnit', 'type.isString', 'type.isArray', 'type.isMatrix', 'type.isDenseMatrix', 'type.isSparseMatrix', 'type.isCollection', 'type.isRange', 'type.isIndex', 'type.isBoolean', 'type.isResultSet', 'type.isHelp', 'type.isFunction', 'type.isDate', 'type.isRegExp', 'type.isObject', 'type.isNull', 'type.isUndefined', 'type.isAccessorNode', 'type.isArrayNode', 'type.isAssignmentNode', 'type.isBlockNode', 'type.isConditionalNode', 'type.isConstantNode', 'type.isFunctionAssignmentNode', 'type.isFunctionNode', 'type.isIndexNode', 'type.isNode', 'type.isObjectNode', 'type.isOperatorNode', 'type.isParenthesisNode', 'type.isRangeNode', 'type.isSymbolNode', 'type.isChain', 'type.BigNumber', 'type.Chain', 'type.Complex', 'type.Fraction', 'type.Matrix', 'type.DenseMatrix', 'type.SparseMatrix', 'type.Spa', 'type.FibonacciHeap', 'type.ImmutableDenseMatrix', 'type.Index', 'type.Range', 'type.ResultSet', 'type.Unit', 'type.Help', 'type.Parser', 'expression.parse', 'expression.Parser', 'expression.node.AccessorNode', 'expression.node.ArrayNode', 'expression.node.AssignmentNode', 'expression.node.BlockNode', 'expression.node.ConditionalNode', 'expression.node.ConstantNode', 'expression.node.IndexNode', 'expression.node.FunctionAssignmentNode', 'expression.node.FunctionNode', 'expression.node.Node', 'expression.node.ObjectNode', 'expression.node.OperatorNode', 'expression.node.ParenthesisNode', 'expression.node.RangeNode', 'expression.node.RelationalNode', 'expression.node.SymbolNode', 'json.reviver', 'error.ArgumentsError', 'error.DimensionError', 'error.IndexError'];\n  movedNames.forEach(function (fullName) {\n    var parts = fullName.split('.');\n    var path = initial(parts);\n    var name = last(parts);\n    var obj = traverse(math, path);\n    lazy(obj, name, function () {\n      warnOnce(\"math.\".concat(fullName, \" is moved to math.\").concat(name, \" in v6.0.0. \") + 'Please use the new location instead.');\n      return math[name];\n    });\n  });\n  lazy(math.expression, 'docs', function () {\n    throw new Error('math.expression.docs has been moved. ' + 'Please import via \"import { docs } from \\'mathjs\\'\"');\n  });\n  math.ArgumentsError = ArgumentsError;\n  math.DimensionError = DimensionError;\n  math.IndexError = IndexError;\n  return math;\n}","map":null,"metadata":{},"sourceType":"module"}