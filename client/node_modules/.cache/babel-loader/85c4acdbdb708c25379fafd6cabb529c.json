{"ast":null,"code":"var abs = Math.abs;\n\nfunction array_fill(i, n, v) {\n  var a = [];\n\n  for (; i < n; i++) {\n    a.push(v);\n  }\n\n  return a;\n}\n\nfunction gauss(A, x) {\n  var i, k, j; // Just make a single matrix\n\n  for (i = 0; i < A.length; i++) {\n    A[i].push(x[i]);\n  }\n\n  var n = A.length;\n\n  for (i = 0; i < n; i++) {\n    // Search for maximum in this column\n    var maxEl = abs(A[i][i]),\n        maxRow = i;\n\n    for (k = i + 1; k < n; k++) {\n      if (abs(A[k][i]) > maxEl) {\n        maxEl = abs(A[k][i]);\n        maxRow = k;\n      }\n    } // Swap maximum row with current row (column by column)\n\n\n    for (k = i; k < n + 1; k++) {\n      var tmp = A[maxRow][k];\n      A[maxRow][k] = A[i][k];\n      A[i][k] = tmp;\n    } // Make all rows below this one 0 in current column\n\n\n    for (k = i + 1; k < n; k++) {\n      var c = -A[k][i] / A[i][i];\n\n      for (j = i; j < n + 1; j++) {\n        if (i === j) {\n          A[k][j] = 0;\n        } else {\n          A[k][j] += c * A[i][j];\n        }\n      }\n    }\n  } // Solve equation Ax=b for an upper triangular matrix A\n\n\n  x = array_fill(0, n, 0);\n\n  for (i = n - 1; i > -1; i--) {\n    x[i] = A[i][n] / A[i][i];\n\n    for (k = i - 1; k > -1; k--) {\n      A[k][n] -= A[k][i] * x[i];\n    }\n  }\n\n  return x;\n}\n\nmodule.exports = gauss;","map":{"version":3,"sources":["C:/Users/Admin/Documents/numer/ProjectNumer-master/ProjectNumer-master/client/src/Regression/LeastSquare.js"],"names":["abs","Math","array_fill","i","n","v","a","push","gauss","A","x","k","j","length","maxEl","maxRow","tmp","c","module","exports"],"mappings":"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","sourcesContent":["var abs = Math.abs;\n\nfunction array_fill(i, n, v) {\n  var a = [];\n  for (; i < n; i++) {\n    a.push(v);\n  }\n  return a;\n}\n\nfunction gauss(A, x) {\n  var i, k, j;\n\n  // Just make a single matrix\n  for (i = 0; i < A.length; i++) {\n    A[i].push(x[i]);\n  }\n  var n = A.length;\n\n  for (i = 0; i < n; i++) {\n    // Search for maximum in this column\n    var maxEl = abs(A[i][i]),\n      maxRow = i;\n    for (k = i + 1; k < n; k++) {\n      if (abs(A[k][i]) > maxEl) {\n        maxEl = abs(A[k][i]);\n        maxRow = k;\n      }\n    }\n\n    // Swap maximum row with current row (column by column)\n    for (k = i; k < n + 1; k++) {\n      var tmp = A[maxRow][k];\n      A[maxRow][k] = A[i][k];\n      A[i][k] = tmp;\n    }\n\n    // Make all rows below this one 0 in current column\n    for (k = i + 1; k < n; k++) {\n      var c = -A[k][i] / A[i][i];\n      for (j = i; j < n + 1; j++) {\n        if (i === j) {\n          A[k][j] = 0;\n        } else {\n          A[k][j] += c * A[i][j];\n        }\n      }\n    }\n  }\n\n  // Solve equation Ax=b for an upper triangular matrix A\n  x = array_fill(0, n, 0);\n  for (i = n - 1; i > -1; i--) {\n    x[i] = A[i][n] / A[i][i];\n    for (k = i - 1; k > -1; k--) {\n      A[k][n] -= A[k][i] * x[i];\n    }\n  }\n\n  return x;\n}\n\nmodule.exports = gauss;\n"]},"metadata":{},"sourceType":"module"}